{"version":3,"sources":["components/Header.js","helpers/helper.js","components/Form.js","components/Resumen.js","components/Resultado.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["StContainerHeader","styled","header","StTextHeader","h1","Header","titulo","capitalize","word","toUpperCase","slice","StField","div","StLabel","label","StSelect","select","StInputRadio","input","StButton","button","StError","Form","setResumen","setCargando","useState","marca","year","plan","datos","setDatos","error","setError","handleChange","target","name","value","onSubmit","e","preventDefault","trim","resultado","diferenciaYear","Date","getFullYear","obtenerDiferenciaYear","parseInt","incremento","calcularMarca","calcularPlan","parseFloat","toFixed","setTimeout","cotizacion","Number","onChange","type","checked","StResumen","Resumen","StResultado","StCotizacion","p","Resultado","TransitionGroup","component","className","CSSTransition","classNames","key","timeout","enter","exit","Spinner","StContainer","StFormContainer","StMessage","App","resumen","cargando","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0cbf627f.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\n\r\nconst StContainerHeader = styled.header`\r\n    background-color: #26C6DA;\r\n    padding: 10px;\r\n    font-weight: bold;\r\n    color: #ffffff;\r\n`;\r\n\r\nconst StTextHeader = styled.h1`\r\n    font-size: 2rem;\r\n    margin: 0;\r\n    font-family: 'Slabo 27px', serif;\r\n    text-align: center;\r\n`;\r\n\r\nconst Header = ({titulo}) => {\r\n    return (\r\n        <StContainerHeader>\r\n            <StTextHeader>{titulo}</StTextHeader>\r\n        </StContainerHeader>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    titulo: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Header\r\n","// obtenr diferencia de años\r\nexport const obtenerDiferenciaYear = (year) => {\r\n   return new Date().getFullYear() - year;\r\n}\r\n\r\n// calcula total a pagar segun la marca \r\nexport const calcularMarca = (marca) => {\r\n   let incremento; \r\n\r\n   switch (marca) {\r\n      case 'americano':\r\n         incremento = 1.15\r\n         break;\r\n      case 'europeo':\r\n         incremento = 1.30\r\n         break;\r\n   \r\n      default:\r\n         incremento = 1.05\r\n         break;\r\n   }\r\n\r\n   return incremento;\r\n}\r\n\r\n// calcula tipo de seguro\r\nexport const calcularPlan = (plan) => {\r\n   return (plan==='basico') ?  1.2 :  1.5\r\n}\r\n\r\n// Muestra la primera letra Mayuscula\r\nexport const capitalize= (word) => {\r\n   return word[0].toUpperCase() + word.slice(1);\r\n}\r\n ","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport { calcularMarca, calcularPlan, obtenerDiferenciaYear } from '../helpers/helper';\r\n\r\nconst StField = styled.div`\r\n    display: flex;\r\n    margin-bottom: 1rem;\r\n    align-items: center;\r\n`;\r\nconst StLabel = styled.label`\r\n    flex: 0 0 100px;  \r\n`;\r\nconst StSelect= styled.select`\r\n    display: block ;\r\n    width: 100%;\r\n    padding: 1rem;\r\n    border: 1px solid #e1e1e1;\r\n    --webkit-appearance:none;\r\n`;\r\nconst StInputRadio= styled.input`\r\n    margin: 0 1rem;\r\n`;\r\nconst StButton= styled.button`\r\n    background-color: #00838f;\r\n    border: none;\r\n    color: #fff;\r\n    font-size: 16px;\r\n    font-weight: bold;\r\n    margin-top: 2rem;\r\n    padding: 1rem;\r\n    text-transform: uppercase;\r\n    width: 100%;\r\n    transition: background-color .3s ease;\r\n\r\n    &:hover{\r\n        background-color: #26c6da;\r\n        cursor: pointer;\r\n    }\r\n`;\r\n\r\nconst StError = styled.div`\r\n    background-color: red;\r\n    color: white;\r\n    padding: 1rem 0;\r\n    width: 100%;\r\n    text-align: center;\r\n    margin-bottom: 1rem;\r\n`;\r\n\r\n\r\n\r\n\r\nconst Form = ({setResumen,setCargando}) => {\r\n\r\n    const [datos, setDatos] = useState({\r\n        marca:'',\r\n        year: '',\r\n        plan: ''\r\n    });\r\n\r\n    const [error, setError] = useState(false)\r\n\r\n    // Extraer los valores destructurando datos\r\n    const {marca, year, plan } = datos;\r\n\r\n    //Leer los datos del formulario\r\n    const handleChange = ({target})=>{\r\n\r\n        setDatos({\r\n            ...datos,\r\n            [target.name]: target.value\r\n        })\r\n        \r\n    }\r\n\r\n    //manejar submit\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        \r\n        // validar los datos\r\n        if(marca.trim() ===\"\" || year.trim() ===\"\" || plan.trim()===\"\" ){\r\n            setError(true);\r\n            return;\r\n        }\r\n\r\n        setError(false);\r\n\r\n        // Precio base de 2000\r\n        let resultado = 2000\r\n\r\n        // Obtener la diferencia de Años\r\n        const diferenciaYear = obtenerDiferenciaYear(parseInt(year));\r\n        \r\n\r\n        // Por Cada año hay que restar el 3%\r\n        resultado -=  resultado*diferenciaYear*0.03;\r\n\r\n\r\n        // Incrementos por marca (Americano:15%, Europeo:30%, Asiatico:5%)\r\n        resultado *= calcularMarca(marca);\r\n\r\n        // Basico aumenta 20% y Completo 50%\r\n        resultado *=  calcularPlan(plan);\r\n        resultado = parseFloat(resultado).toFixed(2)\r\n        \r\n        // Total\r\n        //Activo el spinnner y oculto los componentes Resultado y resumen\r\n        setCargando(true)\r\n        setResumen({ });\r\n\r\n        setTimeout(() => {\r\n            // elimino el spinner\r\n            setCargando(false)\r\n            //paso la info al componente principal\r\n            setResumen({   \r\n                cotizacion: Number(resultado),\r\n                datos\r\n            });\r\n\r\n\r\n        }, 2000);\r\n    }\r\n\r\n    return (\r\n\r\n        \r\n        <form \r\n            onSubmit = { handleSubmit }       \r\n        >\r\n            {error&&<StError><span>Debe llenar todos los campos</span></StError>}\r\n            <StField>\r\n                <StLabel>Marca</StLabel>\r\n                <StSelect\r\n                    name = \"marca\"\r\n                    value ={ marca }  \r\n                    onChange= { handleChange }             \r\n                >\r\n                   <option value=\"\">--Selecione--</option>\r\n                   <option value=\"americano\">Americano</option>\r\n                   <option value=\"europeo\">Europeo</option>\r\n                   <option value=\"asiatico\">Asiático</option>\r\n                </StSelect>\r\n            </StField> \r\n            <StField>\r\n                <StLabel>Año</StLabel>\r\n                <StSelect\r\n                    name = \"year\"\r\n                    value ={ year }\r\n                    onChange= { handleChange } \r\n                >\r\n                    <option value=\"\">-- Seleccione --</option>\r\n                    <option value=\"2021\">2021</option>\r\n                    <option value=\"2020\">2020</option>\r\n                    <option value=\"2019\">2019</option>\r\n                    <option value=\"2018\">2018</option>\r\n                    <option value=\"2017\">2017</option>\r\n                    <option value=\"2016\">2016</option>\r\n                    <option value=\"2015\">2015</option>\r\n                    <option value=\"2014\">2014</option>\r\n                    <option value=\"2013\">2013</option>\r\n                    <option value=\"2012\">2012</option>\r\n               </StSelect>\r\n            </StField>\r\n\r\n            <StField>\r\n                <StLabel>Plan</StLabel>\r\n                <StInputRadio \r\n                    type=\"radio\"\r\n                    name=\"plan\"\r\n                    value=\"basico\"\r\n                    checked={plan === \"basico\"}\r\n                    onChange= { handleChange } \r\n                />Básico\r\n                <StInputRadio \r\n                    type=\"radio\"\r\n                    name=\"plan\"\r\n                    value=\"completo\"\r\n                    checked={plan === \"completo\"}\r\n                    onChange= { handleChange } \r\n                />Completo\r\n                \r\n            </StField> \r\n        \r\n            <StButton type=\"submit\">Cotizar</StButton>\r\n\r\n        </form>\r\n        \r\n    )\r\n}\r\n\r\nForm.propTypes = {\r\n    setResumen: PropTypes.func.isRequired,\r\n    setCargando: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Form\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport { capitalize } from '../helpers/helper';\r\n\r\nconst StResumen = styled.div`\r\n    padding: 1rem;\r\n    text-align: center;\r\n    background-color: #00838f;\r\n    color: #fff;\r\n    margin-top: 1rem;\r\n`;\r\n\r\n\r\n\r\nconst Resumen = ({datos}) => {\r\n\r\n    const {marca, year, plan} = datos;\r\n\r\n    return (\r\n        <StResumen>\r\n           <h2>Resumen de Cotización</h2> \r\n           <ul>\r\n                <li>Marca: {capitalize(marca)}</li>\r\n                <li>Plan: {capitalize(plan)}</li>\r\n                <li>Año del Auto: {year}</li>\r\n           </ul>\r\n        </StResumen>\r\n    )\r\n}\r\n\r\nResumen.propTypes = {\r\n    datos: PropTypes.object.isRequired\r\n}\r\n\r\nexport default Resumen\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styled from '@emotion/styled';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\n\r\nconst StResultado = styled.div`\r\n  text-align: center;\r\n  padding: 0%.5rem;\r\n  border: 1px solid #26c6da;\r\n  background-color: rgb(127, 224, 237);\r\n  margin-top: 1rem;\r\n  position: relative;\r\n`;\r\n\r\nconst StCotizacion = styled.p`\r\n  \r\n  color: #00838F;\r\n  font-size: 18px;\r\n  font-weight: bold;\r\n  margin: 0;\r\n  padding: 1rem;\r\n  text-transform: uppercase;\r\n`;\r\n\r\n\r\n\r\nconst Resultado = ({cotizacion}) => {\r\n\r\n    return (\r\n        <StResultado>\r\n            <TransitionGroup\r\n                component=\"span\"\r\n                className=\"resultado\"\r\n            >\r\n                <CSSTransition\r\n                    classNames=\"resultado\"\r\n                    key={cotizacion}\r\n                    timeout={{ enter: 500, exit:500 }}\r\n                >\r\n                    <StCotizacion>El total es: $ <span>{cotizacion}</span></StCotizacion>\r\n                </CSSTransition>\r\n            </TransitionGroup>\r\n\r\n            \r\n        </StResultado>\r\n    )\r\n}\r\n\r\nResultado.propTypes = {\r\n    cotizacion: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Resultado\r\n","import React from 'react';\r\nimport './Spinner.css';\r\n\r\n\r\nconst Spinner = () => {\r\n    return (\r\n      <div className=\"spinner\">\r\n        <div className=\"cube1\"></div>\r\n        <div className=\"cube2\"></div>\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default Spinner\r\n","import React, { useState } from 'react';\nimport Header from './components/Header';\nimport Form from './components/Form';\nimport Resumen from './components/Resumen';\nimport Resultado from './components/Resultado';\nimport styled from '@emotion/styled';\nimport Spinner from './components/Spinner';\n\n\nconst StContainer = styled.div`\n  max-width: 600px;\n  margin: 0 auto;\n`;\nconst StFormContainer = styled.div`\n  background-color: #ffffff;\n  padding: 3rem;\n`;\nconst StMessage = styled.p`\n  background-color: rgb(127, 224, 237);\n  margin-top: 2rem;\n  padding: 1rem;\n  text-align: center;\n`;\n\n\n\nfunction App() {\n\n  const [resumen, setResumen] = useState({})\n\n  const { cotizacion , datos } = resumen\n  \n  const [cargando, setCargando] = useState(false);\n\n\n  return (\n    <StContainer>\n      <Header\n        titulo='Cotizador de Seguros'\n      />\n      <StFormContainer>\n        <Form\n          setResumen={ setResumen }\n          setCargando={ setCargando }\n        />\n\n        {\n          cargando ? <Spinner/> : null\n        }\n        \n        {}\n        {\n          datos &&  <Resumen  datos={ datos }/>\n        }\n\n        \n        {\n          datos \n          ?  \n            <Resultado  cotizacion={ cotizacion }/>\n          :\n            (  !cargando ? <StMessage>Elige marca, año y tipo de seguro</StMessage> : null)\n        }\n        \n        \n      </StFormContainer>\n    </StContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}